/*------------------------------------------------------------------------------*
  #FLEX-GRID - START
\*------------------------------------------------------------------------------*/

//*-------------------------------------*
//  #Grid Settings
//\*-------------------------------------*/
$g-columns: 12 !default;
$g-gutter: 30px !default;
$g-container: 960px !default;
$g-placeholder-grid: false !default;
$g-class-grid: true !default;
$g-responsive: true !default;
$g-prefix: true !default;
$g-remove-base-suffix: true !default;
$g-responsive-breakpoints: (
        sm: 0,
        md: 576px,
        lg: 992px
) !default;

//*-------------------------------------*
//  #Grid - Default names
//\*-------------------------------------*/
$g-prefix-type: g !default;
$g-container-prefix: container !default;
$g-row-prefix: row !default;
$g-row-utility-prefix: pos !default;
$g-item-prefix: col !default;
$g-offset-prefix: offset !default;

@if (not $g-responsive) {
  $responsive-breakpoints: (
          '': 0
  );
}

@mixin screen-size($size) {
  @if (map_get($g-responsive-breakpoints, $size) == 0 or $size == 0) {
    @content
  } @else if (map-get($g-responsive-breakpoints, $size)) {
    @media (min-width: map-get($g-responsive-breakpoints, $size)) {
      @content;
    }
  } @else if (type_of($size) == 'number') {
    @media (min-width: $size) {
      @content;
    }
  }
}

@mixin prefix-suffix-constructor($g-class, $size: "", $args...) {
  $g-type: '.' !default;
  @if ($g-placeholder-grid) {
    $g-type: '%';
  }
  @if ($size != "") {
    @if (map_get($g-responsive-breakpoints, $size) == 0 and $g-remove-base-suffix and $g-prefix) {

      #{$g-type}#{$g-prefix-type}-#{$g-class}#{$args} {
        @content
      }
    } @else if (map_get($g-responsive-breakpoints, $size) == 0 and $g-remove-base-suffix and not $g-prefix) {
      #{$g-type}#{$g-class}#{$args} {
        @content
      }
    } @else if (map_get($g-responsive-breakpoints, $size) == 0 and not $g-remove-base-suffix and $g-prefix) {
      #{$g-type}#{$g-prefix-type}-#{$g-class}-#{$size}#{$args} {
        @content
      }
    } @else if (map_get($g-responsive-breakpoints, $size) == 0 and not $g-remove-base-suffix and not $g-prefix) {
      #{$g-type}#{$g-class}-#{$size}#{$args} {
        @content
      }
    } @else if (map_get($g-responsive-breakpoints, $size) != 0 and $g-prefix) {
      #{$g-type}#{$g-prefix-type}-#{$g-class}-#{$size}#{$args} {
        @content
      }
    } @else if (map_get($g-responsive-breakpoints, $size) != 0 and not $g-prefix) {
      #{$g-type}#{$g-class}-#{$size}#{$args} {
        @content
      }
    }
  } @else if ($g-prefix) {
    #{$g-type}#{$g-prefix-type}-#{$g-class}#{$args} {
      @content
    }
  } @else {
    #{$g-type}#{$g-class}#{$args} {
      @content
    }
  }
}

$g-row-utilities: (
        xy-center: (justify-content: center, align-items: center),
        x-fs: (justify-content: flex-start),
        x-fe: (justify-content: flex-end),
        x-center: (justify-content: center),
        x-sa: (justify-content: space-around),
        x-sb: (justify-content: space-between),
        y-fs: (align-items: flex-start),
        y-fe: (align-items: flex-end),
        y-center: (align-items: center),
        y-bl: (align-items: baseline),
        y-st: (align-items: stretch)
);

@mixin row-utilities($g-class, $size) {
  @each $utility-class, $sub-map in $g-row-utilities {
    @include prefix-suffix-constructor(#{$g-class}, $size, -#{$utility-class}) {
      @each $property, $value in $sub-map {
        #{$property}: $value;
      }
    }
  }
}

$item-utilities: (
        fs: (align-self: flex-start),
        fe: (align-self: flex-end),
        center: (align-self: center),
        bl: (align-self: baseline),
        st: (align-self: stretch),
);

@mixin item-utilities($g-class, $size) {
  @each $utility-class, $sub-map in $item-utilities {
    @include prefix-suffix-constructor(#{$g-class}, $size, -#{$utility-class}) {
      @each $property, $value in $sub-map {
        #{$property}: $value;
      }
    }
  }
}

/*-------------------------------------*
  #Base HTML Requirements
\*-------------------------------------*/

html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

/*-------------------------------------*
  #Grid Container
\*-------------------------------------*/

%grid-container {
  margin-left: auto;
  margin-right: auto;
  width: $g-container;
  max-width: 100%;
  position: relative;
  padding-left: 15px;
  padding-right: 15px;
}

/// Fixed-width container
@include prefix-suffix-constructor($g-container-prefix) {
  @extend %grid-container;
}

/*-------------------------------------*
  #Grid Row Classes
\*-------------------------------------*/
%grid-row {
  position: relative;
  flex-flow: row wrap;
  margin-left: -($g-gutter / 2);
  margin-right: -($g-gutter / 2);
}

@if ($g-placeholder-grid) {
  @each $size, $value in $g-responsive-breakpoints {
    @include prefix-suffix-constructor($g-row-prefix, #{$size}) {
      @extend %grid-row;
      @include screen-size($size) {
        display: flex;
      }
    }
  }
} @else {
  @if ($g-prefix) {
    [class*=#{$g-prefix-type}-#{$g-row-prefix}] {
      position: relative;
      flex-flow: row wrap;
      margin-left: -($g-gutter / 2);
      margin-right: -($g-gutter / 2);
    }
  } @else {
    [class*=#{$g-row-prefix}] {
      position: relative;
      flex-flow: row wrap;
      margin-left: -($g-gutter / 2);
      margin-right: -($g-gutter / 2);
    }
  }

  @each $size, $value in $g-responsive-breakpoints {
    @include prefix-suffix-constructor($g-row-prefix, #{$size}) {
      @include screen-size($size) {
        display: flex;
      }
    }
  }
}

/*-------------------------------------*
  #Grid Row Utility Classes
\*-------------------------------------*/

@if ($g-prefix) {
  @include prefix-suffix-constructor(no-padding) {
    @at-root [class*=#{$g-prefix-type}-#{$g-row-prefix}]#{&} {
      margin-left: 0;
      margin-right: 0;
    }
    > [class*=#{$g-prefix-type}-#{$g-item-prefix}] {
      padding-left: 0;
      padding-right: 0;
    }
    @at-root [class*=#{$g-prefix-type}-#{$g-item-prefix}]#{&} {
      padding-left: 0;
      padding-right: 0;
    }
  }

  @include prefix-suffix-constructor(add-padding) {
    @at-root [class*=#{$g-prefix-type}-#{$g-item-prefix}]#{&} {
      padding-left: ($g-gutter / 2);
      padding-right: ($g-gutter / 2);
    }
  }
} @else {

  @include prefix-suffix-constructor(no-padding) {
    @at-root [class*=#{$g-row-prefix}]#{&} {
      margin-left: 0;
      margin-right: 0;
    }
    > [class*=#{$g-item-prefix}] {
      padding-left: 0;
      padding-right: 0;
    }
    @at-root [class*=#{$g-item-prefix}]#{&} {
      padding-left: 0;
      padding-right: 0;
    }
  }

  @include prefix-suffix-constructor(add-padding) {
    @at-root [class*=#{$g-item-prefix}]#{&} {
      padding-left: ($g-gutter / 2);
      padding-right: ($g-gutter / 2);
    }
  }
}

@each $size, $value in $g-responsive-breakpoints {
  @include screen-size($size) {
    @include row-utilities($g-row-utility-prefix, $size)
  }
}

/*-------------------------------------*
  #Grid Items
\*-------------------------------------*/

@if ($g-placeholder-grid) {
  %grid-item {
    position: relative;
    min-height: 1px;
    padding-right: ($g-gutter / 2);
    padding-left: ($g-gutter / 2);
    flex: 0 0 100%;
  }

  @each $g-size, $value in $g-responsive-breakpoints {
    @include prefix-suffix-constructor($g-item-prefix, $g-size) {
      @extend %grid-item;
      @include screen-size($g-size) {
        flex: 1;
      }
    }
  }
  @each $g-size, $value in $g-responsive-breakpoints {
    @for $i from 1 through $g-columns {
      @include prefix-suffix-constructor($g-item-prefix, $g-size, -#{$i}) {
        @extend %grid-item;
      }
    }
  }
} @else {
  @if ($g-prefix) {
    [class*=#{$g-prefix-type}-#{$g-item-prefix}] {
      position: relative;
      min-height: 1px;
      padding-right: ($g-gutter / 2);
      padding-left: ($g-gutter / 2);
      flex: 0 0 100%;
    }
  } @else {
    [class*=#{$g-item-prefix}] {
      position: relative;
      min-height: 1px;
      padding-right: ($g-gutter / 2);
      padding-left: ($g-gutter / 2);
      flex: 0 0 100%;
    }
  }
  @each $size, $value in $g-responsive-breakpoints {
    @include prefix-suffix-constructor($g-item-prefix, $size) {
      @include screen-size($size) {
        flex: 1;
      }
    }
  }
}

@each $size, $value in $g-responsive-breakpoints {
  @include screen-size($size) {
    @for $i from 1 through $g-columns {
      @include prefix-suffix-constructor($g-item-prefix, $size, -#{$i}) {
        flex: 0 0 percentage($i / $g-columns);
      }
    }
  }
}

/*-------------------------------------*
  #Grid Item Utility Classes
\*-------------------------------------*/
@each $size, $value in $g-responsive-breakpoints {
  @include screen-size($size) {
    @include item-utilities($g-item-prefix, $size)
  }
}

@each $size, $value in $g-responsive-breakpoints {
  @include screen-size($size) {
    @for $i from 1 through $g-columns {
      @include prefix-suffix-constructor($g-offset-prefix, $size, -#{$i}) {
        margin-left: percentage($i / $g-columns)
      }
    }
  }
}

/*------------------------------------------------------------------------------*
  #FLEX-GRID - END
\*------------------------------------------------------------------------------*/