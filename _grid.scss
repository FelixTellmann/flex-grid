/*------------------------------------------------------------------------------*
  #FLEX-GRID - START
\*------------------------------------------------------------------------------*/

//*-------------------------------------*
//  #Grid Settings
//\*-------------------------------------*/
$columns: 12 !default;
$gutter: 30px !default;
$container: 960px !default;
$placeholder-grid: false !default;
$class-grid: true !default;
$responsive: true !default;
$grid-prefix: true !default;
$remove-base-suffix: true !default;
$responsive-breakpoints: (
        sm: 0,
        md: 576px,
        lg: 992px
) !default;

//*-------------------------------------*
//  #Grid - Default names
//\*-------------------------------------*/
$grid-prefix-type: g !default;
$grid-container-prefix: container !default;
$grid-row-prefix: row !default;
$grid-row-utility-prefix: pos !default;
$grid-item-prefix: col !default;
$grid-offset-prefix: offset !default;


@if (not $responsive) {
  $responsive-breakpoints: (
          '': 0
  );
}

@mixin screen-size($size) {
  @if (map_get($responsive-breakpoints, $size) == 0 or $size == 0) {
    @content
  } @else if (map-get($responsive-breakpoints, $size)) {
    @media (min-width: map-get($responsive-breakpoints, $size)) {
      @content;
    }
  } @else if (type_of($size) == 'number') {
    @media (min-width: $size) {
      @content;
    }
  }
}

@mixin prefix-suffix-constructor($class, $size: "", $args...) {
  $grid-type: '.' !default;
  @if ($placeholder-grid) {
    $grid-type: '%';
  }
  @if ($size != "") {
    @if (map_get($responsive-breakpoints, $size) == 0 and $remove-base-suffix and $grid-prefix) {

      #{$grid-type}#{$grid-prefix-type}-#{$class}#{$args} {
        @content
      }
    } @else if (map_get($responsive-breakpoints, $size) == 0 and $remove-base-suffix and not $grid-prefix) {
      #{$grid-type}#{$class}#{$args} {
        @content
      }
    } @else if (map_get($responsive-breakpoints, $size) == 0 and not $remove-base-suffix and $grid-prefix) {
      #{$grid-type}#{$grid-prefix-type}-#{$class}-#{$size}#{$args} {
        @content
      }
    } @else if (map_get($responsive-breakpoints, $size) == 0 and not $remove-base-suffix and not $grid-prefix) {
      #{$grid-type}#{$class}-#{$size}#{$args} {
        @content
      }
    } @else if (map_get($responsive-breakpoints, $size) != 0 and $grid-prefix) {
      #{$grid-type}#{$grid-prefix-type}-#{$class}-#{$size}#{$args} {
        @content
      }
    } @else if (map_get($responsive-breakpoints, $size) != 0 and not $grid-prefix) {
      #{$grid-type}#{$class}-#{$size}#{$args} {
        @content
      }
    }
  } @else if ($grid-prefix) {
    #{$grid-type}#{$grid-prefix-type}-#{$class}#{$args} {
      @content
    }
  } @else {
    #{$grid-type}#{$class}#{$args} {
      @content
    }
  }
}

$row-utilities: (
        xy-center: (justify-content: center, align-items: center),
        x-fs: (justify-content: flex-start),
        x-fe: (justify-content: flex-end),
        x-center: (justify-content: center),
        x-sa: (justify-content: space-around),
        x-sb: (justify-content: space-between),
        y-fs: (align-items: flex-start),
        y-fe: (align-items: flex-end),
        y-center: (align-items: center),
        y-bl: (align-items: baseline),
        y-st: (align-items: stretch)
);

@mixin row-utilities($class, $size) {
  @each $utility-class, $sub-map in $row-utilities {
    @include prefix-suffix-constructor(#{$class}, $size, -#{$utility-class}) {
      @each $property, $value in $sub-map {
        #{$property}: $value;
      }
    }
  }
}

$item-utilities: (
        fs: (align-self: flex-start),
        fe: (align-self: flex-end),
        center: (align-self: center),
        bl: (align-self: baseline),
        st: (align-self: stretch),
);

@mixin item-utilities($class, $size) {
  @each $utility-class, $sub-map in $item-utilities {
    @include prefix-suffix-constructor(#{$class}, $size, -#{$utility-class}) {
      @each $property, $value in $sub-map {
        #{$property}: $value;
      }
    }
  }
}



/*-------------------------------------*
  #Base HTML Requirements
\*-------------------------------------*/

html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

/*-------------------------------------*
  #Grid Container
\*-------------------------------------*/

%grid-container {
  margin-left: auto;
  margin-right: auto;
  width: $container;
  max-width: 100%;
  position: relative;
  padding-left: 15px;
  padding-right: 15px;
}

/// Fixed-width container
@include prefix-suffix-constructor($grid-container-prefix) {
  @extend %grid-container;
}

/*-------------------------------------*
  #Grid Row Classes
\*-------------------------------------*/
%grid-row {
  position: relative;
  flex-flow: row wrap;
  margin-left: -($gutter / 2);
  margin-right: -($gutter / 2);
}

@each $size, $value in $responsive-breakpoints {
  @include prefix-suffix-constructor($grid-row-prefix, #{$size}) {
    @extend %grid-row;
    @include screen-size($size) {
      display: flex;
    }
  }
}

/*-------------------------------------*
  #Grid Row Utility Classes
\*-------------------------------------*/
@include prefix-suffix-constructor(no-padding) {
  margin-left: 0;
  margin-right: 0;
  > [class~=item] {
    padding-left: 0;
    padding-right: 0;
  }
}

@include prefix-suffix-constructor(add-padding) {
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);
}

@each $size, $value in $responsive-breakpoints {
  @include screen-size($size) {
    @include row-utilities($grid-row-utility-prefix, $size)
  }
}

/*-------------------------------------*
  #Grid Items
\*-------------------------------------*/

%grid-item {
  position: relative;
  min-height: 1px;
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);
  flex: 0 0 100%;
}

@each $size, $value in $responsive-breakpoints {
  @include prefix-suffix-constructor($grid-item-prefix, $size) {
    @extend %grid-item;
    @include screen-size($size) {
      flex: 1;
    }
  }
}

@each $size, $value in $responsive-breakpoints {
  @for $i from 1 through $columns {
    @include prefix-suffix-constructor($grid-item-prefix, $size, -#{$i}) {
      @extend %grid-item;
    }
  }
}

@each $size, $value in $responsive-breakpoints {
  @include screen-size($size) {
    @for $i from 1 through $columns {
      @include prefix-suffix-constructor($grid-item-prefix, $size, -#{$i}) {
        flex: 0 0 percentage($i / $columns);
      }
    }
  }
}

/*-------------------------------------*
  #Grid Item Utility Classes
\*-------------------------------------*/
@each $size, $value in $responsive-breakpoints {
  @include screen-size($size) {
    @include item-utilities($grid-item-prefix, $size)
  }
}

@each $size, $value in $responsive-breakpoints {
  @include screen-size($size) {
    @for $i from 1 through $columns {
      @include prefix-suffix-constructor($grid-offset-prefix, $size, -#{$i}) {
        margin-left: percentage($i / $columns)
      }
    }
  }
}

/*------------------------------------------------------------------------------*
  #FLEX-GRID - END
\*------------------------------------------------------------------------------*/